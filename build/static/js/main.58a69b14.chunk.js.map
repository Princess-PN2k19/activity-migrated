{"version":3,"sources":["Login.tsx","Register.tsx","Company.tsx","Employee.tsx","PrivateRoute.tsx","images/404.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Login","useState","uname","setUname","pass","setPass","history","useHistory","localStorage","getItem","to","pathname","className","name","type","value","onChange","e","target","placeholder","required","onClick","userAccount","username","password","alert","axios","post","then","res","data","error","setItem","user","push","console","log","catch","err","Register","props","inputRegUname","inputRegPass","inputRegConfirmPass","register","regUname","regPass","regConfirmPass","Modal","setAppElement","Companies","companies","editCompany","companyName","inputCompName","addInputCompany","deleteCompany","setIdEdit","idEdit","getAllCompanies","inputNewCompanyName","isOpen","setIsOpen","idDelete","setIdDelete","toggleModal","disabled","map","item","index","id","company_name","put","overlayClassName","Employee","handleEdit","inputNewEmployeeName","inputNewPosition","inputNewEmployeeCompany","positions","company_Names","employees","employeeName","position","inputCompId","inputEmpName","inputEmpPosition","addInputEmployee","options","deleteEmployee","setIdEmpEdit","idEmpEdit","editEmployee","i","length","role","employee_position","employee_name","PrivateRoute","children","rest","auth","render","App","state","login","newCompanyName","newEmployeeCompany","newEmployeeName","newPosition","companyId","employee_id","company_Ids","usernames","users","apiResponse","idEmpDelete","a","get","setState","getAllCompanyNames","logout","removeItem","names","forEach","getAllEmployees","newAccount","includes","getAllPositions","getAllUsernames","unames","status","delete","compIdsCopy","filter","this","exact","path","Company","alt","src","image","react","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.58a69b14.chunk.js","sourcesContent":["import './App.css';\nimport axios from \"axios\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { useState } from 'react';\n\nfunction Login() {\n    const [uname, setUname] = useState(\"\")\n    const [pass, setPass] = useState(\"\")\n    const handleUname = (e: any) => {\n        setUname(e.target.value)\n    }\n    const handlePass = (e: any) => {\n        setPass(e.target.value)\n    }\n\n    const history = useHistory();\n\n    const LoginFunction = () => {\n        const userAccount = {\n            username: uname,\n            password: pass\n        };\n        if (uname === '' || pass === '') {\n            alert(\"All fields are required!\")\n        } else {\n            axios.post('api/user/login', userAccount)\n                .then(res => {\n                    if (res.data.error === false) {\n                        localStorage.setItem(\"username\", res.data.user[0].username);\n                        history.push('/')\n                    } else {\n                        console.log(\"Invalid credentials!\")\n                        setUname('')\n                        setPass('')\n                    }\n                })\n                .catch(err => {\n                    console.log(err, \"ERROR\")\n                    alert(\"Invalid credentials!\");\n                    setUname('')\n                    setPass('')\n                })\n        }\n    }\n\n    const auth = localStorage.getItem('username')\n\n    if (auth) {\n        return (\n            < Redirect to={{ pathname: \"/\" }}></  Redirect>\n        )\n    } else {\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <h1>Login</h1><br /><br />\n                    <label>Username*:</label><br /><br />\n                    <input name=\"username\" type=\"text\" value={uname} onChange={handleUname} placeholder=\"Enter your username\" required></input><br /><br /><br />\n                    <label>Password*:</label><br /><br />\n                    <input name=\"password\" type=\"password\" value={pass} onChange={handlePass} placeholder=\"Enter your password\" required></input><br /><br /><br />\n                    <button className=\"loginBtn\" onClick={LoginFunction}>Login</button><br /><br /><br />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;","import './App.css';\nimport { Redirect } from \"react-router-dom\";\n\ninterface IProps {\n    inputRegUname: any,\n    inputRegPass: any,\n    inputRegConfirmPass: any,\n    register: any,\n    regUname: string,\n    regPass: string,\n    regConfirmPass: string\n}\n\n\nfunction Register(props: IProps) {\n    const { inputRegUname, inputRegPass, inputRegConfirmPass, register, regUname, regPass, regConfirmPass } = props;\n\n    const auth = localStorage.getItem('username')\n    if (auth) {\n        return (\n            < Redirect to={{ pathname: \"/\" }}></  Redirect>\n        )\n    } else {\n        return (\n            <div className=\"register\">\n                <div className=\"regContainer\">\n                    <h1>Register</h1><br /><br />\n                    <label>Username*:</label><br /><br />\n                    <input name=\"username\" type=\"text\" value={regUname} onChange={inputRegUname} placeholder=\"Enter your username\" required></input><br /><br /><br />\n                    <label>Password*:</label><br /><br />\n                    <input name=\"password\" type=\"password\" value={regPass} onChange={inputRegPass} placeholder=\"Enter your password\" required></input><br /><br /><br />\n                    <label>Confirm Password*:</label><br /><br />\n                    <input name=\"password\" type=\"password\" value={regConfirmPass} onChange={inputRegConfirmPass} placeholder=\"Confirm your password\" required></input><br /><br /><br />\n                    <button className=\"regBtn\" onClick={register}>Register</button><br /><br /><br />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Register;","import './App.css';\nimport axios from \"axios\";\nimport Modal from \"react-modal\";\nimport React, { useState } from \"react\";\nModal.setAppElement(\"#root\");\n\n\ninterface ICompany {\n    id: string,\n    company_name: string\n}\n\ninterface IEditCompany {\n    id: string,\n    company_name: string\n  }\n\ninterface IProps {\n    companies: ICompany[],\n    editCompany: IEditCompany,\n    companyName: string,\n    inputCompName: any,\n    addInputCompany: any,\n    deleteCompany: any,\n    idEdit: string,\n    setIdEdit: any,\n    getAllCompanies: any,\n    inputNewCompanyName: any,\n    newCompanyName: string,\n}\n\nfunction Companies(props: IProps) {\n    const { companies, editCompany, companyName, inputCompName, addInputCompany, deleteCompany, setIdEdit, idEdit, getAllCompanies, inputNewCompanyName } = props;\n    const [isOpen, setIsOpen] = useState(false);\n    const [idDelete, setIdDelete] = useState('');\n    const handleEdit = (id: any) => {\n        if (editCompany.company_name === \"\") {\n            alert(\"New company name field cannot be empty!\");\n        } else {\n            axios.put('api/companies/' + id, { company_name: editCompany.company_name })\n                .then(res => {\n                    console.log(\"SUCCESS\", res)\n                    alert(\"Updated successfully!\");\n                    getAllCompanies()\n                    setIdEdit('', '')\n\n                })\n                .catch(err => {\n                    console.log(\"ERROR\", err)\n                    alert(\"Error.\")\n                })\n        }\n    }\n\n    const handleDelete = (id: string) => {\n        setIdDelete(id)\n    }\n\n    const handleCancel = () => {\n        setIdEdit(' ', ' ')\n    }\n\n    const toggleModal = () => {\n        setIsOpen(!isOpen);\n    }\n\n    return (\n        <div className=\"company\">\n            <input name=\"companyName\" value={companyName} type=\"text\" onChange={inputCompName} placeholder=\"Enter a company\" required>\n            </input>\n            <button type=\"submit\" disabled={!companyName} onClick={addInputCompany} >Add</button>\n            <br /><br />\n            <table>\n                <thead>\n                    <tr>\n                        <th>Company Name</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {companies.map((item, index) => (\n                        item.id === idEdit ? <tr key={index}>\n                            <td><input className=\"editCompanyInput\" value={editCompany.company_name} onChange={(e) => inputNewCompanyName(e, index)}></input></td>\n                            <td><button className=\"updateBtn\" onClick={() => handleEdit(idEdit)}>Save</button>\n                                <button className=\"cancelBtn\" onClick={() => { handleCancel() }}>Cancel</button>\n                            </td></tr> : <tr key={index}>\n                                <td>{item.company_name}</td>\n                                <td><button className=\"editBtn\" onClick={() => setIdEdit(item.id, item.company_name) }>Edit</button>\n                                    <button className=\"deleteBtn\" onClick={() => { toggleModal(); handleDelete(item.id); }}>Delete</button>\n                                    <Modal isOpen={isOpen} className=\"mymodal\" overlayClassName=\"myoverlay\">\n                                        <div>Are you sure you want to remove this company?</div><br></br>\n                                        <button className=\"deleteBtn\" onClick={() => { toggleModal(); deleteCompany(idDelete); }}>Yes</button>\n                                        <button className=\"cancelBtn\" onClick={toggleModal}>Cancel</button>\n                                    </Modal>\n                                </td>\n                            </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Companies;","import './App.css';\nimport Modal from \"react-modal\";\nimport React, { useState } from \"react\";\n\nModal.setAppElement(\"#root\");\n\ninterface IEmployee {\n    company_name: string,\n    id: string,\n    employee_name: string,\n    employee_position: string\n}\n\ninterface IEditEmployee {\n    company_name: string,\n    id: string,\n    employee_name: string,\n    employee_position: string\n  }\n\ninterface IPosition {\n    id: string,\n    role: string\n}\n\ninterface IProps {\n    editEmployee: IEditEmployee,\n    positions: IPosition[],\n    company_Names: string[],\n    company_Ids: string[],\n    employees: IEmployee[],\n    companyName: string,\n    employeeName: string,\n    position: string,\n    inputCompId: any,\n    inputEmpName: any,\n    inputEmpPosition: any,\n    addInputEmployee: any,\n    options: any,\n    deleteEmployee: any,\n    setIdEmpEdit: any,\n    idEmpEdit: string,\n    inputNewEmployeeCompany: any,\n    inputNewPosition: any,\n    inputNewEmployeeName: any,\n    handleEdit: any,\n}\n\nfunction Employee(props: IProps) {\n    const { handleEdit, inputNewEmployeeName, inputNewPosition, inputNewEmployeeCompany, positions, company_Names, employees, companyName, employeeName, position, inputCompId, inputEmpName, inputEmpPosition, addInputEmployee, options, deleteEmployee, setIdEmpEdit, idEmpEdit, editEmployee} = props;\n    const [isOpen, setIsOpen] = useState(false);\n    const [idDelete, setIdDelete] = useState('');\n    const handleCancel = () => {\n        setIdEmpEdit('', '', '', '')\n    }\n\n    const toggleModal = () => {\n        setIsOpen(!isOpen);\n    }\n\n    const handleDelete = (id: string) => {\n        setIdDelete(id)\n    }\n\n\n    return (\n        <div className=\"employee\">\n            <select value={companyName} onChange={inputCompId}>{company_Names.map((i, index) => options(i, index))}</select>\n            { positions.length && <select value={position} onChange={inputEmpPosition}>{positions.map((i, index) =>  options(i.role, index) )}</select>}\n            <input type=\"text\" value={employeeName} name=\"employeeName\" onChange={inputEmpName} placeholder=\"Enter an employee name\" required></input>\n            <button type=\"submit\" disabled={!companyName || !employeeName || !position} onClick={addInputEmployee}>Add</button>\n            <br /><br />\n            <table>\n                <thead>\n                    <tr>\n                        <th>Company</th>\n                        <th>Position</th>\n                        <th>Employee Name</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {employees.map((item, index) => (\n                        item.id === idEmpEdit ? <tr key={index}>\n                            <td><select className=\"editEmployeeCompany\" value={editEmployee.company_name} onChange={(e) => inputNewEmployeeCompany(e)}>{company_Names.map((i, index) => options(i, index))}</select></td>\n                            <td><select className=\"editEmployeePosition\" value={editEmployee.employee_position} onChange={(e) => inputNewPosition(e)}>{positions.map((i, index) => options(i.role, index))}</select></td>\n                            <td><input onChange={(e) => inputNewEmployeeName(e)} value={editEmployee.employee_name} type=\"text\" className=\"editEmployeeName\" placeholder=\"New employee name\" /></td>\n                            <td><button onClick={() => handleEdit(idEmpEdit)} type=\"submit\" className=\"updateBtn\">Save</button>\n                                <button onClick={() => handleCancel()} type=\"submit\" className=\"cancelBtn\">Cancel</button>\n                            </td></tr> : <tr key={index}>\n                                <td>{item.company_name}</td>\n                                <td>{item.employee_position}</td>\n                                <td>{item.employee_name}</td>\n                                <td><button className=\"editBtn\" onClick={() => setIdEmpEdit(item.id, item.company_name, item.employee_name, item.employee_position)}>Edit</button>\n                                    <button className=\"deleteBtn\" onClick={() => { toggleModal(); handleDelete(item.id) }}>Delete</button></td>\n                                <Modal isOpen={isOpen} className=\"mymodal\" overlayClassName=\"myoverlay\">\n                                    <div>Are you sure you want to remove this employee?</div><br></br>\n                                    <button className=\"deleteBtn\" onClick={() => { toggleModal(); deleteEmployee(idDelete); }}>Yes</button>\n                                    <button className=\"cancelBtn\" onClick={toggleModal}>Cancel</button>\n                                </Modal>\n                            </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n\n    );\n}\n\nexport default Employee;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\ninterface IProps {\n    children: React.ReactNode,\n    path: string,\n    exact?: any\n}\n\nfunction PrivateRoute (props: IProps) {\n    const { children, ...rest } = props;\n    const auth = localStorage.getItem('username')\n\n    const routeComponent = () => {\n        if(auth) {\n            return (children)\n        } else {\n            return (<Redirect to={{pathname: \"login\"}}/>)\n        }\n    }\n\n    return (\n        <Route {...rest} render={routeComponent}/>\n    )\n};\n\nexport default PrivateRoute;\n\n","export default __webpack_public_path__ + \"static/media/404.563a0798.jpg\";","import './App.css';\nimport * as react from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport axios from 'axios';\nimport Login from './Login';\nimport Register from './Register';\nimport Company from './Company';\nimport Employee from './Employee';\nimport PrivateRoute from './PrivateRoute';\nimport image from './images/404.jpg';\n\ninterface ICompany {\n  id: string,\n  company_name: string\n}\n\ninterface IEditCompany {\n  id: string,\n  company_name: string\n}\n\ninterface IPosition {\n  id: string,\n  role: string\n}\n\ninterface IEmployee {\n  company_name: string,\n  id: string,\n  employee_name: string,\n  employee_position: string\n}\n\ninterface IEditEmployee {\n  company_name: string,\n  id: string,\n  employee_name: string,\n  employee_position: string\n}\n\ninterface IState {\n  editCompany: IEditCompany,\n  editEmployee: IEditEmployee,\n  login: boolean,\n  regUname: string,\n  regPass: string,\n  regConfirmPass: string,\n  uname: string,\n  pass: string,\n  companyName: string,\n  newCompanyName: string,\n  newEmployeeCompany: string,\n  newEmployeeName: string,\n  newPosition: string,\n  companyId: string,\n  employeeName: string,\n  position: string,\n  id: string,\n  employee_id: string,\n  positions: IPosition[],\n  companies: ICompany[],\n  employees: IEmployee[],\n  company_Ids: string[],\n  company_Names: string[],\n  usernames: string[],\n  users: any[],\n  apiResponse: string,\n  idEdit: string,\n  idEmpEdit: string,\n  idEmpDelete: string\n}\n\nclass App extends react.Component<any, IState> {\n  state: IState = {\n    editCompany: {\n      id: '',\n      company_name: ''\n    },\n    editEmployee: {\n      company_name: '',\n      id: '',\n      employee_name: '',\n      employee_position: ''\n    },\n    login: true,\n    regUname: '',\n    regPass: '',\n    regConfirmPass: '',\n    uname: '',\n    pass: '',\n    companyName: '',\n    newCompanyName: '',\n    newEmployeeCompany: '',\n    newEmployeeName: '',\n    newPosition: '',\n    companyId: '',\n    employeeName: '',\n    position: '',\n    id: '',\n    employee_id: '',\n    positions: [],\n    companies: [],\n    employees: [],\n    company_Ids: [],\n    company_Names: [],\n    usernames: [],\n    users: [],\n    apiResponse: '',\n    idEdit: '',\n    idEmpEdit: '',\n    idEmpDelete: ''\n  };\n\n  componentDidMount() {\n    this.getAllCompanies()\n    this.getAllEmployees()\n    this.getAllUsernames()\n    this.getAllPositions()\n  }\n\n  getAllCompanies = async () => {\n    try {\n      const data = await axios.get('api/companies')\n      this.setState({ companies: data.data })\n      this.getAllCompanyNames()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  logout = () => {\n    this.setState({ login: true })\n    localStorage.removeItem(\"username\");\n  }\n\n  getAllCompanyNames = () => {\n    let names: string[] = []\n    this.state.companies.forEach(item => {\n      names.push(item.company_name)\n    })\n    this.setState({ company_Names: names, companyName: this.state.companies[0].company_name})\n  }\n\n  options = (i: number, index: number) => {\n    return <option key={`${index}-test`}>{i}</option>\n  }\n\n  inputCompName = (e: any) => {\n    const { value } = e.target;\n    this.setState({ companyName: value });\n  }\n\n  inputRegUname = (e: any) => {\n    const { value } = e.target;\n    this.setState({ regUname: value })\n  }\n\n  inputRegPass = (e: any) => {\n    const { value } = e.target;\n    this.setState({ regPass: value })\n  }\n\n  inputRegConfirmPass = (e: any) => {\n    const { value } = e.target;\n    this.setState({ regConfirmPass: value })\n  }\n\n  inputCompId = (e: any) => {\n    const { value } = e.target;\n    this.setState({ companyName: value });\n  }\n\n  inputEmpName = (e: any) => {\n    const { value } = e.target;\n    this.setState({ employeeName: value });\n  }\n\n  inputEmpPosition = (e: any) => {\n    const { value } = e.target;\n    this.setState({ position: value });\n  }\n\n  inputNewCompanyName = (e: any) => {\n    const { value } = e.target;\n    this.setState({ editCompany: { ...this.state.editCompany, company_name: value } });\n  }\n\n  inputNewEmployeeCompany = (e: any) => {\n    const { value } = e.target;\n    this.setState({ editEmployee: { ...this.state.editEmployee, company_name: value } });\n  }\n\n  inputNewPosition = (e: any) => {\n    const { value } = e.target;\n    this.setState({ editEmployee: { ...this.state.editEmployee, employee_position: value } });\n  }\n  inputNewEmployeeName = (e: any, index: number) => {\n    const { value } = e.target;\n    this.setState({ editEmployee: { ...this.state.editEmployee, employee_name: value } });\n\n  }\n\n  handleEdit = (id: any) => {\n    if (this.state.editEmployee.company_name === \"\" || this.state.editEmployee.employee_name === \"\" || this.state.editEmployee.employee_position === \"\") {\n      alert(\"All fields are required!\");\n    } else {\n      axios.put('api/employees/' + id, { company_name: this.state.editEmployee.company_name, employee_name: this.state.editEmployee.employee_name, employee_position: this.state.editEmployee.employee_position })\n        .then(res => {\n          console.log(\"SUCCESS\", res)\n          alert(\"Updated successfully!\");\n          this.getAllEmployees()\n          this.setIdEmpEdit('', '', '', '')\n        })\n        .catch(err => {\n          console.log(\"ERROR\", err)\n          alert(\"Error.\")\n        })\n    }\n  }\n\n  register = () => {\n    const { regUname, regPass, regConfirmPass } = this.state;\n    const newAccount = {\n      username: regUname,\n      password: regPass\n    }\n    if (regUname === '' || regPass === '' || regConfirmPass === '') {\n      alert(\"All fields are required!\")\n    } else {\n      if (this.state.usernames.includes(regUname)) {\n        alert(\"Username already exist!\")\n        this.setState({ regUname: '', regPass: '', regConfirmPass: '' })\n      } else {\n        if (regPass !== regConfirmPass) {\n          alert(\"Passwords did not match!\")\n          this.setState({ regPass: '', regConfirmPass: '' })\n        } else {\n          axios.post('api/user/register', newAccount)\n            .then(res => {\n              alert(\"Sucessfully registered.\");\n              localStorage.setItem(\"username\", regUname);\n              this.setState({ regUname: '', regPass: '', regConfirmPass: '' })\n            })\n            .catch(err => {\n              console.log(\"acc\", newAccount)\n              alert(\"Registration failed.\");\n              this.setState({ regUname: '', regPass: '', regConfirmPass: '' })\n            })\n        }\n      }\n    }\n  }\n\n  getAllPositions = async () => {\n    try {\n      const data = await axios.get('api/positions')\n      console.log(\"FFFFFFFFFFFFFD\", data.data);\n      this.setState({ positions: data.data })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  getAllEmployees = async () => {\n    try {\n      const data = await axios.get('api/employees')\n      this.setState({ employees: data.data })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  getAllUsernames = async () => {\n    try {\n      const data = await axios.get('api/users')\n      this.setState({ users: data.data })\n      let unames: string[] = []\n      this.state.users.forEach(item => {\n        unames.push(item.username)\n      })\n      this.setState({ usernames: unames })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  addInputCompany = () => {\n    const company_names = this.state.companies.map((item) => item.company_name)\n    if (company_names.includes(this.state.companyName)) {\n      alert(\"Company already exist!\");\n      this.setState({ companyName: '' })\n    } else {\n      if (!this.state.companyName) {\n        alert(\"Input field cannot be empty!\");\n      } else {\n        axios.post('api/company', { company_name: this.state.companyName, status: \"Active\" })\n          .then(res => {\n            console.log(res, \"Company added successfully!\")\n            this.getAllCompanies()\n            this.getAllCompanyNames()\n            this.setState({ companyName: '' })\n          })\n          .catch(err => {\n            console.log(err, \"Failed.\")\n            this.setState({ companyName: '' })\n          })\n      }\n    }\n  }\n\n  addInputEmployee = () => {\n    if (this.state.companyName === '' || this.state.employeeName === '' || this.state.position === '') {\n      alert(\"All fields are required!\")\n    } else {\n      axios.post('api/employee', { company_name: this.state.companyName, employee_name: this.state.employeeName, employee_position: this.state.position, status: \"Active\" })\n        .then(res => {\n          console.log(\"Employee added successfully!\", res)\n          this.getAllEmployees()\n          this.setState({ companyName: '', employeeName: '', position: '' })\n        })\n        .catch(err => {\n          console.log(err, \"Employee was not added.\")\n          this.setState({ companyName: '', employeeName: '', position: '' })\n        })\n    }\n  }\n\n  deleteCompany = (id: any) => {\n    axios.delete('api/companies/' + id)\n      .then(res => {\n        console.log(res, \"Deleted\")\n        this.getAllCompanies()\n        const compIdsCopy = this.state.company_Ids.filter((item) => item !== id);\n        this.setState({ company_Ids: compIdsCopy })\n      })\n      .then(err => {\n        console.log(err)\n      })\n  }\n\n  deleteEmployee = (id: any) => {\n    axios.delete('api/employees/' + id)\n      .then(res => {\n        console.log(res, \"Deleted\")\n        this.getAllEmployees()\n      })\n      .then(err => {\n        console.log(err)\n      })\n  }\n\n  setIdEdit = (id: any, company_name: string) => {\n    this.setState({ idEdit: id, editCompany: { id, company_name } })\n  }\n\n  setIdEmpEdit = (id: any, company_name: string, employee_name: string, employee_position: string) => {\n    this.setState({ idEmpEdit: id, editEmployee: { company_name, id, employee_name, employee_position } })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/login\">\n              <Link to=\"/register\"><button className=\"routeBtn\">Register</button></Link>\n              <Login />\n            </Route>\n            <Route exact path=\"/register\">\n              <Link to=\"/login\"><button className=\"routeBtn\">Login</button></Link>\n              <Register regUname={this.state.regUname} regPass={this.state.regPass} regConfirmPass={this.state.regConfirmPass} inputRegUname={this.inputRegUname} inputRegPass={this.inputRegPass} inputRegConfirmPass={this.inputRegConfirmPass} register={this.register}></Register>\n            </Route>\n\n            <PrivateRoute exact path=\"/\">\n              <div className=\"activity\">\n                <button className=\"signOutBtn\" onClick={this.logout}>Sign Out</button><br /><br />\n                <h1 className=\"header\">Companies</h1>\n                <Company\n                  editCompany={this.state.editCompany}\n                  newCompanyName={this.state.newCompanyName}\n                  inputNewCompanyName={this.inputNewCompanyName}\n                  getAllCompanies={this.getAllCompanies}\n                  setIdEdit={this.setIdEdit}\n                  idEdit={this.state.idEdit}\n                  companies={this.state.companies}\n                  companyName={this.state.companyName}\n                  deleteCompany={this.deleteCompany}\n                  inputCompName={this.inputCompName}\n                  addInputCompany={this.addInputCompany} />\n              </div>\n              <div className=\"employees\">\n                <h1 className=\"header\">Employees</h1>\n                <Employee\n                  editEmployee={this.state.editEmployee}\n                  handleEdit={this.handleEdit}\n                  inputNewEmployeeName={this.inputNewEmployeeName}\n                  inputNewPosition={this.inputNewPosition}\n                  inputNewEmployeeCompany={this.inputNewEmployeeCompany}\n                  positions={this.state.positions}\n                  setIdEmpEdit={this.setIdEmpEdit}\n                  idEmpEdit={this.state.idEmpEdit}\n                  company_Names={this.state.company_Names}\n                  company_Ids={this.state.company_Ids}\n                  employees={this.state.employees}\n                  companyName={this.state.companyName}\n                  employeeName={this.state.employeeName}\n                  position={this.state.position}\n                  deleteEmployee={this.deleteEmployee}\n                  inputCompId={this.inputCompId}\n                  inputEmpName={this.inputEmpName}\n                  inputEmpPosition={this.inputEmpPosition}\n                  addInputEmployee={this.addInputEmployee}\n                  options={this.options} />\n              </div>\n            </PrivateRoute>\n\n            <Route path=\"*\">\n              <div>\n                <img alt=\"404 no found\" src={image}></img>\n              </div>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}